{"version":3,"sources":["firebase.js","components/Home.js","components/LogIn.js","components/SignUp.js","components/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["firebaseauth","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Home","handleLogOut","auth","signOut","then","catch","error","react_default","a","createElement","onClick","this","Component","Login","handleSignUp","_callee","event","_event$target$element","email","password","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","signInWithEmailAndPassword","value","sent","_this","props","history","push","t0","alert","stop","Link","to","onSubmit","name","type","placeholder","withRouter","SignUp","createUserWithEmailAndPassword","PrivateRoute","_ref","component","authenticated","rest","Object","objectWithoutProperties","Route","assign","render","Redirect","App","state","loading","user","_this2","onAuthStateChanged","setState","currentUser","console","log","uid","_this$state","BrowserRouter","exact","path","LogIn","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28204e8a.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseauth = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID\n});\n\nexport default firebaseauth;","import React, { Component } from \"react\";\nimport firebaseauth from \"../firebase\"\n\nclass Home extends Component {\n  handleLogOut = () => {\n    firebaseauth.auth().signOut().then(function () {\n      // Sign-out successful.\n    }).catch(function (error) {\n      throw error\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Home</h1>\n        <button onClick={this.handleLogOut}>Log Out</button>\n      </div>\n    )\n  }\n}\n\nexport default Home","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport firebaseauth from \"../firebase\";\n\n\nclass Login extends Component {\n  handleSignUp = async event => {\n    event.preventDefault();\n    const { email, password } = event.target.elements;\n    try {\n      const user = await firebaseauth\n        .auth()\n        .signInWithEmailAndPassword(email.value, password.value);\n      this.props.history.push(\"/\");\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Login</h1>\n        <h6><Link to=\"/\">Go Home</Link></h6>\n        <form onSubmit={this.handleSignUp}>\n          <label>\n            Email\n            <input\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n            />\n          </label>\n          <label>\n            Password\n            <input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </label>\n          <button type=\"submit\">Login</button>\n        </form>\n        <button><Link to=\"/signup\">Sign Up</Link></button>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Login);","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport firebaseauth from \"../firebase\";\n\nclass SignUp extends Component {\n  handleSignUp = async event => {\n    event.preventDefault();\n    const { email, password } = event.target.elements;\n    try {\n      const user = await firebaseauth\n        .auth()\n        .createUserWithEmailAndPassword(email.value, password.value);\n      this.props.history.push(\"/\");\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Sign up</h1>\n        <h6><Link to=\"/\">Go Home</Link></h6>\n        <form onSubmit={this.handleSignUp}>\n          <label>\n            Email\n            <input\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n            />\n          </label>\n          <label>\n            Password\n            <input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </label>\n          <button type=\"submit\">Sign Up</button>\n        </form>\n        <button><Link to=\"/login\">Login</Link></button>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(SignUp);","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function PrivateRoute({\n  component: Component,\n  authenticated,\n  ...rest\n}) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        authenticated === true ? (\n          <Component {...props} {...rest} />\n        ) : (\n            <Redirect to=\"/login\" />\n          )\n      }\n    />\n  );\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Home from \"./components/Home\";\nimport LogIn from \"./components/LogIn\";\nimport SignUp from \"./components/SignUp\";\nimport PrivateRoute from \"./components/PrivateRoute\"\nimport firebaseauth from \"./firebase\"\n\n\n\n\n\nclass App extends Component {\n  state = { loading: true, authenticated: false, user: null };\n\n  componentDidMount() {\n    firebaseauth.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          authenticated: true,\n          currentUser: user,\n          loading: false\n        });\n        console.log(this.state.currentUser.uid);\n      } else {\n        this.setState({\n          authenticated: false,\n          currentUser: null,\n          loading: false\n        });\n      }\n    });\n  }\n\n  render() {\n    const { authenticated, loading } = this.state;\n\n    if (loading) {\n      return <p>Loading..</p>;\n    }\n\n    return (\n      <Router>\n        <div>\n          <PrivateRoute exact path=\"/\" component={Home} authenticated={this.state.authenticated} />\n          <Route exact path=\"/login\" component={LogIn} />\n          <Route exact path=\"/signup\" component={SignUp} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}